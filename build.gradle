// These links can help to understand how to build cURL and OpenSSL:
// https://tomthorp.me/blog/installing-custom-openssl-and-curl-legacy-php

plugins {
    id 'java-library'
    id 'org.ajoberstar.grgit' version '4.0.0-rc.1' apply false
}

// Name for directory of git dependencies
def projectDir = project.projectDir.toString()
def privateDepsPath = 'git'
def privateRepsFolder = projectDir + "/" + privateDepsPath
def buildFolderName = 'build'
def buildLibsFolderName = 'libs'
def buildPath = projectDir + '/' + buildFolderName
def buildLibsPath = buildPath + '/' + buildLibsFolderName

// Info about environment
def JNI_INCLUDE_DIR = System.properties['java.home'] + '/include'
def JNI_LIB_DIR = System.properties['java.home'] + '/jre/lib/amd64/server'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Credentials

/* ==================================================================================== */
/* Common routines */
/* ==================================================================================== */

ext._execute = { root, cmd ->
    def rnd = Math.random()

    // We use file for sh commands because Gradle can't correctly execute them (don't ask why, it's just true, deal with it)
    def f = new File(root, '__temporary_script_' + rnd)

    // Set command to script file
    f.text = cmd

    // Change rights
    ('chmod 777 __temporary_script_' + rnd).execute(null, file(root))

    // Print command for user
    println cmd

    // Execute
    def stdout = ""
    def task = ('./__temporary_script_' + rnd).execute(null, file(root))
    task.in.eachLine {line ->
        println line
        stdout += line + '\n'
    }
    task.err.eachLine {line -> println 'ERROR/WARNING: ' + line}
    task.waitFor()

    delete file(root + '/__temporary_script_' + rnd)

    return stdout
}

task prepareFolderStructure {
    _execute(projectDir, 'mkdir ' + buildFolderName)
    _execute(buildPath, 'mkdir ' + buildLibsFolderName)
}

test {
  testLogging.showStandardStreams = true
  workingDir = new File(buildLibsPath)
}

/* ==================================================================================== */
/* Github Repo routines */
/* ==================================================================================== */

task refreshOpensslRepo {
    doLast {
        if (!file(privateRepsFolder + '/openssl/.git').exists())
        {
            project.delete(files(privateRepsFolder + '/openssl'))
            Grgit.clone(
                dir: privateRepsFolder + '/openssl',
                uri: 'https://github.com/openssl/openssl/',
                refToCheckout: 'OpenSSL_1_1_1')
        }
    }
}

task refreshCurlRepo {
    doLast {
        if (!file(privateRepsFolder + '/curl/.git').exists())
        {
            project.delete(files(privateRepsFolder + '/curl'))
            Grgit.clone(
                dir: privateRepsFolder + '/curl',
                uri: 'https://github.com/curl/curl/',
                refToCheckout: 'curl-7_67_0')
        }
    }
}

task refreshPhpRepo {
    doLast {
        if (!file(privateRepsFolder + '/php-src/.git').exists())
        {
            project.delete(files(privateRepsFolder + '/php-src'))
            Grgit.clone(
                dir: privateRepsFolder + '/php-src',
                uri: 'https://github.com/php/php-src/',
                refToCheckout: 'php-7.4.2')
        }
    }
}

/* ==================================================================================== */
/* OpenSSL routines */
/* ==================================================================================== */

ext.opensslPrefix = privateRepsFolder + '/openssl/build_root'
task rebuildOpenssl {
    outputs.file(opensslPrefix + '/lib/libssl.dylib')
    outputs.file(opensslPrefix + '/lib/libcrypto.dylib')
    dependsOn refreshOpensslRepo
    doLast {
        def rp = privateRepsFolder + '/openssl'

        // Clean
        _execute(rp, 'echo ' + '[' + name + '] Processing OpenSSL-repo\\\'s make clean...')
        _execute(rp, 'make clean')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        // Configure OpenSSL build
        _execute(rp, 'echo ' + '[' + name + '] Processing OpenSSL-repo\\\'s configure...')
        _execute(rp, './config -fPIC no-threads --prefix=' + opensslPrefix + ' --openssldir=' + opensslPrefix)
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        // Build
        _execute(rp, 'echo ' + '[' + name + '] Processing OpenSSL-repo\\\'s make...')
        _execute(rp, 'make -j6')
        _execute(rp, 'echo ' + '[' + name + '] Done!')
        
        // Install to prefix
        _execute(rp, 'echo ' + '[' + name + '] Processing OpenSSL-repo\\\'s make install...')
        _execute(rp, 'make install')
        _execute(rp, 'echo ' + '[' + name + '] Done!')
    }
}

/* ==================================================================================== */
/* cURL routines */
/* ==================================================================================== */

ext.curlPrefix = privateRepsFolder + '/curl/build_root'
task rebuildCurl {
    outputs.file(curlPrefix + '/lib/libcurl.dylib')
    dependsOn refreshCurlRepo
    dependsOn rebuildOpenssl

    doLast {
        def rp = privateRepsFolder + '/curl'

        // Clean
        _execute(rp, 'echo ' + '[' + name + '] Processing cURL-repo\\\'s make clean...')
        _execute(rp, 'make clean')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        // Prepare configuration
        _execute(rp, 'echo ' + '[' + name + '] Processing cURL-repo\\\'s buildconf...')
        _execute(rp, './buildconf')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        // Configure cURL build
        _execute(rp, 'echo ' + '[' + name + '] Processing cURL-repo\\\'s configure...')
        _execute(rp, 'env PKG_CONFIG_PATH=' + opensslPrefix + '/lib/pkgconfig' + ' ./configure --with-ssl=' + opensslPrefix + ' --prefix=' + curlPrefix)
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        // Build
        _execute(rp, 'echo ' + '[' + name + '] Processing cURL-repo\\\'s make...')
        _execute(rp, 'make -j6')
        _execute(rp, 'echo ' + '[' + name + '] Done!')
        
        // Install to prefix
        _execute(rp, 'echo ' + '[' + name + '] Processing cURL-repo\\\'s install...')
        _execute(rp, 'make install')
        _execute(rp, 'echo ' + '[' + name + '] Done!')
    }
}

/* ==================================================================================== */
/* JNI-Layer routines */
/* ==================================================================================== */

task buildNativeZvalHeader() {
    inputs.file(projectDir + '/src/main/java/php4java/Native/Zval.java')
    
    doLast {
        _execute(projectDir + '/src/jni',
            'javac ' + projectDir + '/src/main/java/php4java/Native/Zval.java' +
            ' -h ' + projectDir + '/include/jni/')
    }
}

task buildNativePhpHeader() {
    dependsOn buildNativeZvalHeader
    inputs.file(projectDir + '/src/main/java/php4java/Native/Php.java')

    doLast {
        _execute(projectDir + '/src/jni',
            'javac ' + projectDir + '/src/main/java/php4java/Native/Php.java' +
            ' -h ' + projectDir + '/include/jni/' +
            ' -cp ' + projectDir + '/src/main/java')
    }
}

task buildPhp4JavaObjFile {
    outputs.file(buildPath + '/php4java.o')
    dependsOn buildNativePhpHeader
    dependsOn refreshPhpRepo
    
    doLast {
        // Show environment info
        showEnvironmentInfo()

        // Make object file using code
        _execute(projectDir,
            'cc -g -fPIC -c src/jni/php4java.c -o ' + buildPath + '/php4java.o' +
            " -I" + JNI_INCLUDE_DIR +
            " -I" + JNI_INCLUDE_DIR + '/darwin' +
            " -I" + privateRepsFolder + '/php-src' +
            " -I" + privateRepsFolder + '/php-src/main' +
            " -I" + privateRepsFolder + '/php-src/zend' +
            " -I" + privateRepsFolder + '/php-src/TSRM' +
            " -I" + projectDir + '/include/jni')
    }
}

/* ==================================================================================== */
/* PHP routines */
/* ==================================================================================== */

ext.phpPrefix = privateRepsFolder + '/php-src/build_root'
task rebuildPhp {
    outputs.file(buildLibsPath + '/libphp4java.dylib')
    dependsOn refreshPhpRepo
    dependsOn rebuildCurl
    dependsOn rebuildOpenssl
    dependsOn buildPhp4JavaObjFile

    doLast
    {
        def rp = privateRepsFolder + '/php-src'

        _execute(rp, 'echo ' + '[' + name + '] Processing PHP-repo\\\'s make clean...')
        _execute(rp, 'make clean')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Processing PHP-repo\\\'s ./buildconf...')
        _execute(rp, './buildconf --force')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Processing PHP-repo\\\'s ./configure...\n')
        _execute(rp, './configure' +
            ' --enable-embed' +
            ' --enable-sockets' +
            ' --enable-mbstring' +
            ' PHP_OPENSSL=yes' +
            ' OPENSSL_LIBS="-L' + opensslPrefix + '/lib -lssl -lcrypto"' +
            ' OPENSSL_CFLAGS="-I' + opensslPrefix + '/include"' +
            ' --with-openssl=' + opensslPrefix +
            ' CURL_LIBS="-L' + curlPrefix + '/lib -lcurl"' +
            ' CURL_CFLAGS="-I' + curlPrefix + '/include"' +
            ' --with-openssl-dir=' + opensslPrefix +
            ' --with-curl=' + curlPrefix +
            ' --prefix=' + phpPrefix +
            ' LIBXML_CFLAGS="-I$(brew --prefix libxml2)/include/libxml2"' +
            ' LIBXML_LIBS="-L$(brew --prefix libxml2)/lib -lxml2"' +
            ' --with-libxml=$(brew --prefix libxml2)' +
            ' YACC=$(brew --prefix bison)/bin/bison' +
            ' --with-iconv=$(brew --prefix libiconv)')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Modifying original PHP Makefile...')
        _execute(rp, 'echo "\\nlibphp4java.dylib: \\\$(all_targets)" >> Makefile')

        // Temporary space for libs string
        _execute(rp, 'echo "\\tTMP=\\\"\\\$(EXTRA_LIBS)\\\" ; \\\\" >> Makefile')

        // Remove OpenSSL external dependency (we will link it statically)
        _execute(rp, 'echo "\\tTMP=\\\$\\\${TMP//-lssl/} ; \\\\" >> Makefile')

        // Remove Crypto external dependency (we will link it statically)
        _execute(rp, 'echo "\\tTMP=\\\$\\\${TMP//-lcrypto/} ; \\\\" >> Makefile')

        // Remove cURL external dependency (we will link it statically)
        _execute(rp, 'echo "\\tTMP=\\\$\\\${TMP//-lcurl/} ; \\\\" >> Makefile')

        // We will add some things to makefile because we need dynamic library
        // Firstly we add sequence part for PHP building
        def libtoolBuildSequence = '\\t\\$(LIBTOOL) --mode=link --tag=disable-static \\$(CC) -dynamiclib -static \\$(EXTRA_CFLAGS) -rpath \\$(phptempdir) \\$(EXTRA_LDFLAGS) \\$(LDFLAGS) \\$(PHP_RPATHS) \\$(PHP_GLOBAL_OBJS) \\$(PHP_SAPI_OBJS) \\$\\$TMP \\$(ZEND_EXTRA_LIBS) '

        // Than we need to add a static link for cURL library
        libtoolBuildSequence += curlPrefix + '/lib/libcurl.a '

        // Than we need to add all cURL dependencies
        libtoolBuildSequence += '-L' + opensslPrefix + '/lib -lnghttp2 -lidn2 -lrtmp -lldap -lbrotlidec -lz '

        // Than we need to add a static link for OpenSSL (and crypto) library
        libtoolBuildSequence += opensslPrefix + '/lib/libssl.a ' + opensslPrefix + '/lib/libcrypto.a '

        // And at last we need to add our JNI-layer into this library and set output dylib file name
        libtoolBuildSequence += buildPath + '/php4java.o -o libphp4java.dylib '

        // Now we can add prepared string to Makefile and start building true embedded PHP with JNI (in just one ".dylib")
        _execute(rp, 'echo "' + libtoolBuildSequence + '" >> Makefile')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Building PHP-repo...')
        _execute(rp, 'make -j6 libphp4java.dylib')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Fixing PHP-repo build \\(moving ".o" files\\)...')
        _execute(rp, 'find . -name "*.o" | grep ".libs/" | gxargs -L 1 -I{} bash -c \'cp {} $(dirname {})/../\'')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Rebuilding fixed PHP-repo...')
        _execute(rp, 'make -j6 libphp4java.dylib')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Installing...')
        _execute(rp, 'make install')
        _execute(rp, 'echo ' + '[' + name + '] Done!')

        _execute(rp, 'echo ' + '[' + name + '] Copying dylib to build/libs directory...')
        _execute(rp, 'cp ' + privateRepsFolder + '/php-src/libphp4java.dylib ' + buildLibsPath)
        _execute(rp, 'echo ' + '[' + name + '] Done!')
    }
}

/* ==================================================================================== */
/* PHP4JAVA routines */
/* ==================================================================================== */

ext.showEnvironmentInfo = {
    // Show info about building environment
    println "Building on OS: " + System.properties['os.name']
    println "Using JDK: " + System.properties['java.home']
    println "Using JNI include directory: " + JNI_INCLUDE_DIR
    println "Using JNI lib directory: " + JNI_LIB_DIR
}

task refreshRepos {
    dependsOn refreshPhpRepo
    dependsOn refreshOpensslRepo
    dependsOn refreshCurlRepo
}

// Build can run only after preparations
build.dependsOn rebuildPhp

// Disable tests by default
test.onlyIf { false }